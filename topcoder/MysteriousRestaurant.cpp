#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>
#include <string>
#include <vector>


#define p(x) cout << #x << ":" << x << endl;

using namespace std;

class MysteriousRestaurant {

string itoa(int val) {stringstream ss;ss << val;return ss.str();} 

int GCD(int a, int b) {if(b == 0) return a; return GCD(b, a%b);}

int LCM(int a, int b) {return (a*b)/GCD(a, b);}

int days[7];
char dp[7][50][10000];
vector<string> p;

int v(char c){
	if(c >= '0' && c <= '9') return (int)(c - '0');
	if(c >= 'a' && c <= 'z') return (int)(c - 'a')+36;
	if(c >= 'A' && c <= 'Z') return (int)(c - 'A')+10;
}

int rec(int day, int dish, int bud){
	if(day >= p.size() || bud < v(p[day][dish])){
		p(day) p(dish) p(bud) p(v(p[day][dish]))
		return 0;
	}
	p(day) p(dish) p(bud)
	if(day >= 7){
		int count = 0;
		int d = day+1;
		int b = bud;
		while(d < p.size() && b >= 0){
			count ++;
			b -= v(p[d][days[d%7]]);
			d ++;
		}
		return count;
	}
	if(dp[day][dish][bud] != -1){
		return dp[day][dish][bud];
	}
	
	int best = 0;
	for(int i = 0; i < p[0].size(); i++){
		days[day] = i;
		best = max(best, rec(day+1, i, bud-v(p[day][dish])));
	}
	dp[day][dish][bud] = best+1;
	return best+1;
}

public:
	int maxDays(vector <string> prices, int budget) {
	
		memset(dp, -1, sizeof(dp));
		p = prices;
	
		int answer = 0;
		for(int i = 0; i < prices[0].size(); i++){
			days[0] = i;
			answer = max(answer, rec(0, i, budget));
		}
		return answer;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	MysteriousRestaurant *obj;
	int answer;
	obj = new MysteriousRestaurant();
	clock_t startTime = clock();
	answer = obj->maxDays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"26","14","72","39","32","85","06"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"26","14","72","39","32","85","06","91"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"SRM","512"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"Dear","Code","rsHa","veFu","nInT","heCh","alle","ngeP","hase","andb","ecar","eful"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 256;
	p2 = 10;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
