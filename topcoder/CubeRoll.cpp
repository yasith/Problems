#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

#define p(x) cout << #x << ":" << x << endl;

using namespace std;

struct move{
	int pos;
	int dist;
};


class CubeRoll {
public:
	int getMinimumSteps(int initPos, int goalPos, vector <int> holePos) {
		int start = min(initPos, goalPos);
		int end = max(initPos, goalPos);
		
		int maxlim = INT_MAX;
		int minlim = INT_MIN;
		for(int i = 0; i < holePos.size(); i++){
			int h = holePos[i];
			if(start <= h &&  h <= end) return -1;
			if(h > end) maxlim = min(h, maxlim);
			if(h < start) minlim = max(h, minlim);
		}
		
		p(maxlim)
		p(minlim)
		
		queue<move> moves;
		move m1;
		m1.pos = start;
		m1.dist = 0;
		moves.push(m1);
		
		int pos;
		while(!moves.empty()){
			move m = moves.front();
			moves.pop();
			pos = m.pos;
			if(pos == end){
				return m.dist;
			}
			
			p(pos)
			
			//move right
			int c = 1;
			while((int)sqrt(c) + pos < maxlim){
				move m2;
				m2.pos = pos + (int)sqrt(c);
				m2.dist = m.dist+1;
				
				c++;
			}
			
			//move left
			c = 1;
			while(pos - (int)sqrt(c) > minlim){
				move m2;
				m2.pos = pos - (int)sqrt(c);
				m2. dist = m.dist+1;
				
				c++;
			}
		}
		
		return -1;
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CubeRoll *obj;
	int answer;
	obj = new CubeRoll();
	clock_t startTime = clock();
	answer = obj->getMinimumSteps(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 1;
	int t2[] = {3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 36;
	p1 = 72;
	int t2[] = {300,100,200,400};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 21;
	int t2[] = {38,45};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 98765;
	p1 = 4963;
	int t2[] = {10,20,40,30};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 68332;
	p1 = 825;
	int t2[] = {99726,371,67,89210};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
