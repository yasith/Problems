#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool used[100];

class BunnyComputer {
public:
	
	int len;
	int k1;
	vector<int> prefs;
	
	
	int getmax(int t){
		int maxpref = 0;
		for(int i = t+1; i < len-k1-1; i++){
			if(used[i] || used[i+k1+1]){
				continue;
			}
			used[i] = used[i+k1+1] = true;
			cout << "going " << i << endl;
			maxpref = max(maxpref, getmax(i) + prefs[i] + prefs[i+k1+1]);
			used[i] = used[i+k1+1] = false;		
		}
		cout << "t=" << t << "+" << t+k1+1 << " pref=" << maxpref << endl;
		return maxpref;
	}
	
	int getMaximum(vector <int> preference, int k) {
		int maxpref = 0;
		k1 = k;
		prefs = preference;
		len = preference.size();
		cout << k1 << endl;
		for(int i = 0; i < len-k-1; i++){
			used[i] = used[i+k+1] = true;
			maxpref = max(maxpref, getmax(i) + preference[i] + preference[i+k+1]);
			used[i] = used[i+k+1] = false;		
			cout << "t=" << i << " pref=" << maxpref << endl;
		}
		return maxpref;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BunnyComputer *obj;
	int answer;
	obj = new BunnyComputer();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,1,4,1,5,9,2,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 28;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,1,4,1,5,9,2,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 31;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {487,2010};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {{6725, 424799, 40, 171, 138920, 215, 10441, 4517, 12, 17739, 14040, 125, 3697, 72334, 125, 12279, 3181, 474190, 466, 17607, 8982, 78456, 526, 1987, 15021, 566042, 6, 4, 82813, 652505, 44, 58096, 81970, 191, 39464, 468396, 30307, 427792, 572920, 100609, 6974, 64670, 587, 28681, 2286, 196523, 190487, 24}};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 11;
	p2 = 4877986;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
