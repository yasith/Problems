#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define p(x) cout << #x << ":" << x << endl;

using namespace std;


class ColoredStrokes {
public:

	int W, H;
	vector<string> pic;
	
	void checkBlue(int y, int x){
		if(x < 0 || x >= W)
			return;
		if(y < 0 || y >= H)
			return;
			
		cout << "Checking Blue" << endl;
		p(x);p(y);
		
		if(pic[y][x] == 'B' || pic[y][x] == 'G'){
			
			if(pic[y][x] == 'G'){
				pic[y][x] = 'R';
			}else{
				pic[y][x] = '.';
			}
			
			checkBlue(y-1, x);
			checkBlue(y+1, x);
			
		}
	}
	
	
	void checkRed(int y, int x){
		if(x < 0 || x >= W)
			return;
		if(y < 0 || y >= H)
			return;
			
		cout << "Checking Red" << endl;
		p(x);p(y);
			
		if(pic[y][x] == 'R' || pic[y][x] == 'G'){
			
			if(pic[y][x] == 'G'){
				pic[y][x] = 'B';
			}else{
				pic[y][x] = '.';
			}
			
			checkRed(y, x-1);
			checkRed(y, x+1);
			
		}
	}

	int getLeast(vector <string> picture) {
	
	H = picture.size();
	W = picture[0].size();
	pic = picture;
	
	int counter = 0;
	
	cout << "Started" << endl;
	
	for(int y = 0; y < H; y++){
		p(counter);
		p(y);
		for(int x = 0; x < W; x++){
			p(x);
			if(pic[y][x] == 'G'){
				//pic[y][x] = 'R';
				checkBlue(y, x);
				counter ++;
			}
			if(pic[y][x] == 'R'){
				//pic[y][x] = '.';
				checkRed(y, x);
				counter ++;
			}
			if(pic[y][x] == 'B'){
				//pic[y][x] = '.';
				checkBlue(y, x);
				counter ++;
			}
		}
	}
		
		return counter;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ColoredStrokes *obj;
	int answer;
	obj = new ColoredStrokes();
	clock_t startTime = clock();
	answer = obj->getLeast(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"...","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..B.","..B."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".BB."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"...B..",".BRGRR",".B.B.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"...B..",".BRBRR",".B.B.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"GR","BG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
